import React, { useState, useEffect } from 'react';
import { Settings, Layers, Palette, Move, Type, Zap, Eye, Download, Upload, RotateCcw } from 'lucide-react';

const ParametricControlDemo = () => {
  const [activeComponent, setActiveComponent] = useState('hero');
  const [showControls, setShowControls] = useState(true);
  const [parameters, setParameters] = useState({
    hero: {
      backgroundColor: '#1a1a2e',
      textColor: '#ffffff',
      fontSize: 48,
      padding: 60,
      borderRadius: 12,
      animationDuration: 1000,
      opacity: 1,
      spacing: 24,
      layout: 'center',
      gradient: true,
      shadowIntensity: 0.3
    },
    button: {
      backgroundColor: '#4f46e5',
      textColor: '#ffffff',
      fontSize: 16,
      padding: 16,
      borderRadius: 8,
      hoverScale: 1.05,
      animationDuration: 300,
      width: 180,
      shadow: true,
      variant: 'filled'
    },
    card: {
      backgroundColor: '#ffffff',
      borderColor: '#e5e7eb',
      borderWidth: 1,
      borderRadius: 12,
      padding: 24,
      shadowIntensity: 0.1,
      hoverLift: 4,
      spacing: 16,
      layout: 'vertical'
    }
  });

  const componentSchemas = {
    hero: {
      name: 'Hero Section',
      category: 'Layout',
      groups: {
        'Visual': ['backgroundColor', 'textColor', 'opacity', 'gradient', 'shadowIntensity'],
        'Typography': ['fontSize'],
        'Layout': ['padding', 'spacing', 'layout'],
        'Effects': ['borderRadius', 'animationDuration']
      },
      parameters: {
        backgroundColor: { type: 'color', default: '#1a1a2e', description: 'Background color' },
        textColor: { type: 'color', default: '#ffffff', description: 'Text color' },
        fontSize: { type: 'slider', min: 24, max: 72, default: 48, unit: 'px', description: 'Font size' },
        padding: { type: 'slider', min: 20, max: 100, default: 60, unit: 'px', description: 'Internal padding' },
        borderRadius: { type: 'slider', min: 0, max: 50, default: 12, unit: 'px', description: 'Corner radius' },
        animationDuration: { type: 'slider', min: 100, max: 2000, default: 1000, unit: 'ms', description: 'Animation duration' },
        opacity: { type: 'slider', min: 0, max: 1, step: 0.1, default: 1, description: 'Opacity' },
        spacing: { type: 'slider', min: 8, max: 48, default: 24, unit: 'px', description: 'Element spacing' },
        layout: { type: 'dropdown', options: ['left', 'center', 'right'], default: 'center', description: 'Text alignment' },
        gradient: { type: 'toggle', default: true, description: 'Enable gradient' },
        shadowIntensity: { type: 'slider', min: 0, max: 1, step: 0.1, default: 0.3, description: 'Shadow intensity' }
      }
    },
    button: {
      name: 'Button',
      category: 'Interactive',
      groups: {
        'Visual': ['backgroundColor', 'textColor', 'variant', 'shadow'],
        'Typography': ['fontSize'],
        'Layout': ['padding', 'width', 'borderRadius'],
        'Effects': ['hoverScale', 'animationDuration']
      },
      parameters: {
        backgroundColor: { type: 'color', default: '#4f46e5', description: 'Button background' },
        textColor: { type: 'color', default: '#ffffff', description: 'Button text color' },
        fontSize: { type: 'slider', min: 12, max: 24, default: 16, unit: 'px', description: 'Font size' },
        padding: { type: 'slider', min: 8, max: 32, default: 16, unit: 'px', description: 'Button padding' },
        borderRadius: { type: 'slider', min: 0, max: 24, default: 8, unit: 'px', description: 'Corner radius' },
        hoverScale: { type: 'slider', min: 1, max: 1.2, step: 0.05, default: 1.05, description: 'Hover scale effect' },
        animationDuration: { type: 'slider', min: 100, max: 800, default: 300, unit: 'ms', description: 'Animation duration' },
        width: { type: 'slider', min: 100, max: 300, default: 180, unit: 'px', description: 'Button width' },
        shadow: { type: 'toggle', default: true, description: 'Drop shadow' },
        variant: { type: 'dropdown', options: ['filled', 'outlined', 'ghost'], default: 'filled', description: 'Button variant' }
      }
    },
    card: {
      name: 'Card',
      category: 'Layout',
      groups: {
        'Visual': ['backgroundColor', 'borderColor', 'borderWidth', 'shadowIntensity'],
        'Layout': ['padding', 'spacing', 'layout'],
        'Effects': ['borderRadius', 'hoverLift']
      },
      parameters: {
        backgroundColor: { type: 'color', default: '#ffffff', description: 'Card background' },
        borderColor: { type: 'color', default: '#e5e7eb', description: 'Border color' },
        borderWidth: { type: 'slider', min: 0, max: 4, default: 1, unit: 'px', description: 'Border width' },
        borderRadius: { type: 'slider', min: 0, max: 24, default: 12, unit: 'px', description: 'Corner radius' },
        padding: { type: 'slider', min: 12, max: 48, default: 24, unit: 'px', description: 'Internal padding' },
        shadowIntensity: { type: 'slider', min: 0, max: 0.5, step: 0.05, default: 0.1, description: 'Shadow intensity' },
        hoverLift: { type: 'slider', min: 0, max: 12, default: 4, unit: 'px', description: 'Hover lift effect' },
        spacing: { type: 'slider', min: 8, max: 32, default: 16, unit: 'px', description: 'Element spacing' },
        layout: { type: 'dropdown', options: ['vertical', 'horizontal'], default: 'vertical', description: 'Layout direction' }
      }
    }
  };

  const updateParameter = (component, param, value) => {
    setParameters(prev => ({
      ...prev,
      [component]: {
        ...prev[component],
        [param]: value
      }
    }));
  };

  const resetComponent = (component) => {
    const schema = componentSchemas[component];
    const resetValues = {};
    Object.entries(schema.parameters).forEach(([key, config]) => {
      resetValues[key] = config.default;
    });
    setParameters(prev => ({
      ...prev,
      [component]: resetValues
    }));
  };

  const exportConfig = () => {
    const config = JSON.stringify(parameters, null, 2);
    const blob = new Blob([config], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'parametric-config.json';
    a.click();
  };

  const renderControl = (component, paramKey, paramConfig) => {
    const currentValue = parameters[component][paramKey];
    
    switch (paramConfig.type) {
      case 'slider':
        return (
          <div className="space-y-2">
            <div className="flex justify-between items-center">
              <span className="text-sm font-medium text-gray-700">{paramConfig.description}</span>
              <span className="text-sm text-gray-500">
                {currentValue}{paramConfig.unit || ''}
              </span>
            </div>
            <input
              type="range"
              min={paramConfig.min}
              max={paramConfig.max}
              step={paramConfig.step || 1}
              value={currentValue}
              onChange={(e) => updateParameter(component, paramKey, parseFloat(e.target.value))}
              className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
            />
          </div>
        );
      
      case 'color':
        return (
          <div className="space-y-2">
            <span className="text-sm font-medium text-gray-700">{paramConfig.description}</span>
            <div className="flex items-center space-x-2">
              <input
                type="color"
                value={currentValue}
                onChange={(e) => updateParameter(component, paramKey, e.target.value)}
                className="w-10 h-10 border border-gray-300 rounded cursor-pointer"
              />
              <input
                type="text"
                value={currentValue}
                onChange={(e) => updateParameter(component, paramKey, e.target.value)}
                className="flex-1 px-3 py-2 border border-gray-300 rounded text-sm"
              />
            </div>
          </div>
        );
      
      case 'dropdown':
        return (
          <div className="space-y-2">
            <span className="text-sm font-medium text-gray-700">{paramConfig.description}</span>
            <select
              value={currentValue}
              onChange={(e) => updateParameter(component, paramKey, e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded text-sm"
            >
              {paramConfig.options.map(option => (
                <option key={option} value={option}>{option}</option>
              ))}
            </select>
          </div>
        );
      
      case 'toggle':
        return (
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium text-gray-700">{paramConfig.description}</span>
            <button
              onClick={() => updateParameter(component, paramKey, !currentValue)}
              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                currentValue ? 'bg-blue-600' : 'bg-gray-200'
              }`}
            >
              <span
                className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                  currentValue ? 'translate-x-6' : 'translate-x-1'
                }`}
              />
            </button>
          </div>
        );
      
      default:
        return null;
    }
  };

  const getComponentStyle = (component) => {
    const params = parameters[component];
    
    switch (component) {
      case 'hero':
        return {
          background: params.gradient 
            ? `linear-gradient(135deg, ${params.backgroundColor}, ${params.backgroundColor}dd)`
            : params.backgroundColor,
          color: params.textColor,
          fontSize: `${params.fontSize}px`,
          padding: `${params.padding}px`,
          borderRadius: `${params.borderRadius}px`,
          opacity: params.opacity,
          textAlign: params.layout,
          boxShadow: `0 ${params.shadowIntensity * 20}px ${params.shadowIntensity * 40}px rgba(0,0,0,${params.shadowIntensity})`,
          transition: `all ${params.animationDuration}ms ease`
        };
      
      case 'button':
        const buttonStyle = {
          backgroundColor: params.variant === 'filled' ? params.backgroundColor : 'transparent',
          color: params.variant === 'filled' ? params.textColor : params.backgroundColor,
          fontSize: `${params.fontSize}px`,
          padding: `${params.padding}px`,
          borderRadius: `${params.borderRadius}px`,
          width: `${params.width}px`,
          border: params.variant === 'outlined' ? `2px solid ${params.backgroundColor}` : 'none',
          boxShadow: params.shadow ? '0 4px 6px rgba(0,0,0,0.1)' : 'none',
          transition: `all ${params.animationDuration}ms ease`,
          transform: 'scale(1)',
          cursor: 'pointer'
        };
        return buttonStyle;
      
      case 'card':
        return {
          backgroundColor: params.backgroundColor,
          borderColor: params.borderColor,
          borderWidth: `${params.borderWidth}px`,
          borderStyle: 'solid',
          borderRadius: `${params.borderRadius}px`,
          padding: `${params.padding}px`,
          boxShadow: `0 ${params.shadowIntensity * 50}px ${params.shadowIntensity * 100}px rgba(0,0,0,${params.shadowIntensity})`,
          transition: 'all 300ms ease'
        };
      
      default:
        return {};
    }
  };

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Control Panel */}
      {showControls && (
        <div className="w-96 bg-white shadow-lg border-r border-gray-200 flex flex-col">
          {/* Header */}
          <div className="p-4 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <h2 className="text-lg font-semibold text-gray-800 flex items-center gap-2">
                <Settings className="w-5 h-5" />
                Parametric Editor
              </h2>
              <div className="flex gap-2">
                <button
                  onClick={exportConfig}
                  className="p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded"
                  title="Export Configuration"
                >
                  <Download className="w-4 h-4" />
                </button>
                <button
                  onClick={() => resetComponent(activeComponent)}
                  className="p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded"
                  title="Reset Component"
                >
                  <RotateCcw className="w-4 h-4" />
                </button>
              </div>
            </div>
          </div>

          {/* Component Selector */}
          <div className="p-4 border-b border-gray-200">
            <div className="flex gap-2">
              {Object.entries(componentSchemas).map(([key, schema]) => (
                <button
                  key={key}
                  onClick={() => setActiveComponent(key)}
                  className={`px-3 py-2 rounded text-sm font-medium transition-colors ${
                    activeComponent === key
                      ? 'bg-blue-100 text-blue-800'
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  }`}
                >
                  {schema.name}
                </button>
              ))}
            </div>
          </div>

          {/* Parameter Controls */}
          <div className="flex-1 overflow-y-auto p-4">
            {activeComponent && componentSchemas[activeComponent] && (
              <div className="space-y-6">
                {Object.entries(componentSchemas[activeComponent].groups).map(([groupName, paramKeys]) => (
                  <div key={groupName} className="space-y-4">
                    <h3 className="text-sm font-semibold text-gray-800 uppercase tracking-wide">
                      {groupName}
                    </h3>
                    <div className="space-y-4">
                      {paramKeys.map(paramKey => (
                        <div key={paramKey} className="p-3 bg-gray-50 rounded-lg">
                          {renderControl(activeComponent, paramKey, componentSchemas[activeComponent].parameters[paramKey])}
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      )}

      {/* Main Content Area */}
      <div className="flex-1 flex flex-col">
        {/* Toolbar */}
        <div className="p-4 bg-white shadow-sm border-b border-gray-200 flex items-center justify-between">
          <div className="flex items-center gap-4">
            <button
              onClick={() => setShowControls(!showControls)}
              className="flex items-center gap-2 px-3 py-2 text-sm font-medium text-gray-700 hover:text-gray-900"
            >
              <Eye className="w-4 h-4" />
              {showControls ? 'Hide' : 'Show'} Controls
            </button>
            <div className="text-sm text-gray-500">
              Live Preview Mode
            </div>
          </div>
          <div className="flex items-center gap-2 text-sm text-gray-500">
            <Zap className="w-4 h-4" />
            Real-time Updates
          </div>
        </div>

        {/* Preview Area */}
        <div className="flex-1 p-8 overflow-auto">
          <div className="max-w-4xl mx-auto space-y-8">
            {/* Hero Section */}
            <div 
              style={getComponentStyle('hero')}
              className="text-center min-h-[300px] flex items-center justify-center"
            >
              <div style={{ marginBottom: `${parameters.hero.spacing}px` }}>
                <h1 className="font-bold mb-4">Parametric Design System</h1>
                <p className="text-lg opacity-90">
                  Real-time control over every visual parameter
                </p>
              </div>
            </div>

            {/* Button Section */}
            <div className="flex justify-center gap-4">
              <button
                style={getComponentStyle('button')}
                onMouseEnter={(e) => {
                  e.target.style.transform = `scale(${parameters.button.hoverScale})`;
                }}
                onMouseLeave={(e) => {
                  e.target.style.transform = 'scale(1)';
                }}
                className="font-medium"
              >
                Primary Action
              </button>
            </div>

            {/* Card Section */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {[1, 2, 3].map((i) => (
                <div
                  key={i}
                  style={getComponentStyle('card')}
                  className="transition-transform hover:scale-105"
                  onMouseEnter={(e) => {
                    e.target.style.transform = `translateY(-${parameters.card.hoverLift}px)`;
                  }}
                  onMouseLeave={(e) => {
                    e.target.style.transform = 'translateY(0)';
                  }}
                >
                  <div className={`flex ${parameters.card.layout === 'vertical' ? 'flex-col' : 'flex-row items-center'}`}>
                    <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-4">
                      <Layers className="w-6 h-6 text-blue-600" />
                    </div>
                    <div className={parameters.card.layout === 'horizontal' ? 'ml-4' : ''}>
                      <h3 className="font-semibold text-gray-800" style={{ marginBottom: `${parameters.card.spacing}px` }}>
                        Feature {i}
                      </h3>
                      <p className="text-gray-600 text-sm">
                        Fully customizable component with parametric controls
                      </p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ParametricControlDemo;